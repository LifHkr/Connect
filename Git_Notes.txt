
#### Git Notes ####

References:
https://gist.github.com/hofmannsven/6814451

https://readwrite.com/2013/10/02/github-for-beginners-part-2/

https://git.wiki.kernel.org/index.php/Main_Page

------------------------------------------------------------------------------


## Help Command

	$ git help
		f forward
		b backwards
		q quit


##Where is Git Config


System:

		Linux		/etc/gitconfig
		Windows		Program Files\Git\etc\gitconfig
		
		
User:

		Linux		~/.gitconfig
		Windows		$HOME\.gitconfig
	
	$ cat .gitconfig	
		

Project

		my_project/.git/config
		
		
------------------------------------------------------------------------------		
	
## Set the default Text Editor

https://help.github.com/articles/associating-text-editors-with-git/

ATOM		$ git config --global core.editor "C:\Users\LifHkr\AppData\Local\atom\bin\atom.cmd" 

Notepad ++	$ git config --global core.editor "'C:/Program Files (x86)/Notepad++/notepad++.exe' -multiInst -notabbar -nosession -noPlugin"

Sublime Text	$ git config --global core.editor "'c:/program files/sublime text 3/subl.exe' -w"

## Set Colors On for CMD

git config --global color.ui true

------------------------------------------------------------------------------

Setup the Windows prompt to show the current branch in use

1. Create a file in notepad called .bash_profile
2. Insert the following text

	parse_git_branch() {
     git branch 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/ (\1)/'
	}
	export PS1="\u@\h \[\033[32m\]\w\[\033[33m\]\$(parse_git_branch)\[\033[00m\] $ "
	
	# or 
	
	#export PS1="\u@\h \[\033[32m\]\$(parse_git_branch)\[\033[00m\] $ "
	
	Where:
	
	In above PS1 we defined following properties:
		\u@\h \[\033[32m\] - user, host name and its displaying color
		\w\[\033[33m\] - current working directory and its displaying color
		\$(parse_git_branch)\[\033[00m\] - git branch name and its displaying colorsource /.
	
	
3. Save the file in your User directory

	Example Output: 

		LifHkr@Test ~/Documents/GitHub/explore_california (master) $

			or 

		LifHkr@Test  (master) $


------------------------------------------------------------------------------

## Setting the Initial Repository

CD to Directory

$ git init

$ ls -la  # View the New directory Files



## Commit New or Change Files

$ git add .   # git add filename

$ git commit -m "Initial Commit"  # Use comment to provide as much info as possible

$ git commit -am "Info"  # Updates all files


## Remove a Files

$ git rm filename

$ git commit -m "Deleted File"


## Rename a File

$ git mv filename1 filename2

$ git commit -m "Renamed File"

## View Status / Log of previous changes

$ git status
$ git log


## See the Changes that were Made

$ git diff

$ git diff --staged  # Changes that have not been committed

$ git diff --color-words filename


------------------------------------------------------------------------------


## Recover an older version of a filename

$ git checkout -- index.html  # -- means to stay in this branch
$ git checkout dde758ba7231 -- resources.html  # Use part of the previous Commit HEAD from Log to restore an old version

## Reset *** Danger Will Robinson! ***

$ git reset --soft  # Does not change Staging or Working

$ git reset --mixed # Changes Staging to match Repository, Does not change Working

$ git reset --hard	# Changes Staging and Working to match Repository

## Remove unwanted Un-Tracked files

$ git clean -n # shows what will be removed

$ git clean -f # Force delete files

## Ignore files

Create a new file in the project called .gitignore
List which files should be ignored
Basic RegEx is accepted

*.txt
 *.zip
!sample.txt # Allowed

https://gist.github.com/octocat/9257657

https://github.com/github/gitignore # Recommended Ignore files based on project type

## Ignore Globally

Create .gitignore_global in the user directory

$ git config --global core.excludefile ~/.gitignore_global

## Stop Tracking a File

$ git rm --cached filename # Copy stays in the Repo

## Add empty directory

Add a file called .getkeep to the empty folder

------------------------------------------------------------------------------		

## See the files via Tree

$ git ls-tree # Shows the hash for each file and folder

	tree = file, blob = folder

------------------------------------------------------------------------------		

## Viewing Commit Logs

$ git log --oneline -5  # -5 Shows the last 5 Commits
$ git log --since="2017" # before and until also works
$ git log --since="2 weeks ago" --until="3 days ago"
$ git log --author="Jerry"
$ git log --grep="temp"
$ git log --oneline --graph --all --decorate

$ git diff 48822aa # Using the SHA from the oneline command for the file needed
$ git diff --stat --summary 48822aa..HEAD


------------------------------------------------------------------------------	

## Branching

$ git branch # Show the current branches
* master # * shows which branch we are on now

$ git branch new_branch_name # Create a branch

$ git checkout new_branch_name # Switches to the new branch

$ git checkout -b new_branch_name  # Create the new branch and switch to it

$ git diff master..new_branch_name # Compare 2 Branches

$ git branch --merged # Which branches are have all commits included

$ git branch -m new_branch_name seo_titile # Rename a branch

$ git branch -d temp_branch # Delete a branch. Includes safety check

------------------------------------------------------------------------------	

## Merge

$ git merge branch_name_to_merge

$ git merge --abort # If conflict arise

If conflicts arise the text document will be annotated with markers showing the areas.

$ git log --graph --oneline --all --decorate # Shows the merge in graph form

$ git mergetool --tools=tool_name  # allows you to use a tool to help merge

	Merge Tools: opendiff kdiff3 tkdiff xxdiff meld tortoisemerge gvimdiff diffuse diffmerge ecmerge p4merge araxis bc codecompare emerge vimdiff


------------------------------------------------------------------------------	

## Stash

$ git stash save "Reason for change"  # Causes a HEAD reset like a commit

$ git stash list

$ git stash show -p stash@{0} # Show changes using the stash reference

$ git stash pop stash@{0} # removes it from the other branch

$ git stash apply stash@{0} # Does not remove it from other branch

$ git stash drop stash@{0} # Removes Stash

$ git stash clear # Clear All Stashes


------------------------------------------------------------------------------	

## Remote Server

$ git remote # Shows Current Remotes Assigned

$ git remote add origin https://github.com/lifhkr/Connect.git

	$ git remote set-url origin https://github.com/lifhkr/california.git

$ git remote -v # View the Remote Repository Link

$ cat .git/config # Shows the link in the config

$ git remote rm origin # Remove a Link

$ git push -u origin master # Upload to the Remote Repository. -u means to track it.

$ git push -f origin master  # Force It

$ git branch -r # Shows Remote Branch

$ git push # Can be used once the tracking branch has been established


------------------------------------------------------------------------------

## Clone a Remote Repository

$ git clone https://github.com/lifhkr/california.git california2


------------------------------------------------------------------------------

## Working with the Remote Repository

$ git fetch # Fetch Remote Changes

	*** Always Fetch Before You Work Each Day
	*** Fetch Before Push

$ git diff origin/master..master	# Check Differences Between Local and Remote

$ git merge origin/master # Merge Remote Changes to Local

$ git pull	# git pull = git fetch + git merge  # Harder to troubleshoot if there are issues

$ git push origin --delete branch_name  # Delete a remote branch
	
------------------------------------------------------------------------------

## Collaboration Work Flow

User 1:

	$ git checkout master

	$ git fetch

	$ git merge origin/master

		$ git checkout -b new_branch_name # Create a new local branch

		$ git add updated_file

		$ git commit -m "Changed a File"
	
	$ git fetch # Check to make sure the remote has not changed since you started your work

	$ git push -u origin updated_file

User 2:

	$ git checkout master

	$ git fetch

	$ git merge origin/master

		$ git checkout -b new_branch_name origin/new_branch_name  # Get the new branch
		
		$ git log # Look at what changes were made
		
		$ git show 84b6adf0 # Look at the SHA info
		
		$ git commit -am "Add Change" # Make a change and re-submit"
		
	$ git fetch
	
	$ git push
	

User 1:

	$ git fetch
	
	$ git log -p new_branch_name..origin/new_branch_name  # Look at the difference
	
	$ git merge origin/new_branch_name # Accept the Changes
	
	$ git checkout master

	$ git fetch

	$ git merge origin/master
	
	$ git merge new_branch_name
	
	$ git push
	

------------------------------------------------------------------------------
	
## Creating Aliases

$ git config --global alias.st "status" # Now You can use git st instead of status

$ git config --global alias.ci "commit"

$ git config --global alias.br "branch"

$ git config --global alias.df "diff"

$ git config --global alias.dfs "diff --staged"

$ git config --global alias.logg "log --graph --decorate --oneline --abbrev-commit --all"


------------------------------------------------------------------------------

## Setting up SSH Key

https://help.github.com/articles/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent/

Open Git BASH

$ ssh-keygen -t rsa -b 4096 -C "your_email@example.com"
	Generating public/private rsa key pair.
	
Enter a file in which to save the key (/c/Users/you/.ssh/id_rsa):[Press enter]

Enter passphrase (empty for no passphrase): [Type a passphrase]
Enter same passphrase again: [Type passphrase again]

# start the ssh-agent in the background
$ eval $(ssh-agent -s)
	Agent pid 59566

$ ssh-add ~/.ssh/id_rsa

Add the SSH key to your GitHub account

https://help.github.com/articles/adding-a-new-ssh-key-to-your-github-account/

clip < ~/.ssh/id_rsa.pub
# Copies the contents of the id_rsa.pub file to your clipboard

Go to Settings on GitHub

SSH and CPG keys

Add SSH Key



	